import React, { useState, useEffect } from "react";
import { Post, Client } from "@/entities/all";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Plus, User, Instagram, Clock, CheckCircle, XCircle, ChevronLeft, ChevronRight } from "lucide-react";
import { useNavigate } from "react-router-dom";
import { createPageUrl, safeDate } from "@/utils";
import { format, startOfWeek, endOfWeek, addWeeks, subWeeks, isWithinInterval } from "date-fns";
import { ptBR } from "date-fns/locale";

const columns = [
  { id: "pendente", title: "üìù Pendente", color: "bg-gray-100" },
  { id: "em_criacao", title: "‚úèÔ∏è Em Cria√ß√£o", color: "bg-blue-100" },
  { id: "aguardando_aprovacao", title: "‚è≥ Aguardando Aprova√ß√£o", color: "bg-yellow-100" },
  { id: "aprovado", title: "‚úÖ Aprovado", color: "bg-green-100" },
  { id: "agendado", title: "üìÖ Agendado", color: "bg-purple-100" },
  { id: "postado", title: "üöÄ Postado", color: "bg-indigo-100" }
];

export default function Kanban() {
  const navigate = useNavigate();
  const [posts, setPosts] = useState([]);
  const [clients, setClients] = useState([]);
  const [currentWeek, setCurrentWeek] = useState(new Date());

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    const [postsData, clientsData] = await Promise.all([
      Post.list("-created_date"),
      Client.list()
    ]);
    setPosts(postsData);
    setClients(clientsData);
  };

  // Calcular in√≠cio e fim da semana (come√ßa na segunda-feira)
  const weekStart = startOfWeek(currentWeek, { weekStartsOn: 1 });
  const weekEnd = endOfWeek(currentWeek, { weekStartsOn: 1 });

  const getClientName = (clientId) => {
    const client = clients.find(c => c.id === clientId);
    return client?.name || "Cliente";
  };

  const getPostsByStatus = (status) => {
    return posts.filter(post => {
      // Filtrar por status
      if (post.status !== status) return false;
      
      // Filtrar por semana se houver data agendada
      if (!post.scheduled_date) return true; // Posts sem data sempre aparecem
      
      const postDate = safeDate(post.scheduled_date);
      if (!postDate) return true; // Se a data for inv√°lida, mostra
      
      // Verificar se o post est√° dentro da semana atual
      return isWithinInterval(postDate, { start: weekStart, end: weekEnd });
    });
  };

  const handleStatusChange = async (postId, newStatus) => {
    await Post.update(postId, { status: newStatus });
    loadData();
  };

  const formatLabels = {
    story: { label: "Story", emoji: "üì±" },
    carrossel: { label: "Carrossel", emoji: "üé†" },
    post: { label: "Post", emoji: "üì∑" },
    reel: { label: "Reel", emoji: "üé¨" }
  };

  // Contar total de posts na semana
  const totalPostsInWeek = posts.filter(post => {
    if (!post.scheduled_date) return false;
    const postDate = safeDate(post.scheduled_date);
    if (!postDate) return false;
    return isWithinInterval(postDate, { start: weekStart, end: weekEnd });
  }).length;

  return (
    <div className="p-4 md:p-8 bg-gradient-to-br from-blue-50 via-purple-50 to-indigo-100 min-h-screen">
      <div className="max-w-[1800px] mx-auto">
        <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-6 gap-4">
          <div>
            <h1 className="text-3xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent mb-2">
              üìã Kanban de Posts
            </h1>
            <p className="text-gray-600">Gerencie o fluxo de trabalho dos seus posts ‚ú®</p>
          </div>
          <Button 
            onClick={() => navigate(createPageUrl("PostCalendar"))}
            className="bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 shadow-lg"
          >
            <Plus className="w-4 h-4 mr-2" />
            ‚ú® Novo Post
          </Button>
        </div>

        {/* Navega√ß√£o Semanal */}
        <div className="bg-white rounded-2xl shadow-lg p-4 mb-6 border-2 border-purple-200">
          <div className="flex items-center justify-between gap-4">
            <Button
              variant="outline"
              size="icon"
              onClick={() => setCurrentWeek(subWeeks(currentWeek, 1))}
              className="rounded-full border-2 border-purple-300 hover:bg-purple-50"
            >
              <ChevronLeft className="w-5 h-5 text-purple-600" />
            </Button>
            
            <div className="flex-1 text-center">
              <h2 className="text-xl font-bold bg-gradient-to-r from-purple-600 to-blue-600 bg-clip-text text-transparent">
                {format(weekStart, "dd/MM", { locale: ptBR })} - {format(weekEnd, "dd/MM/yyyy", { locale: ptBR })}
              </h2>
              <div className="flex items-center justify-center gap-2 text-sm text-gray-500 capitalize mt-1">
                <span>{format(weekStart, "MMMM yyyy", { locale: ptBR })}</span>
                <span className="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-purple-100 text-purple-800 border border-purple-300">
                  {totalPostsInWeek} {totalPostsInWeek === 1 ? 'post' : 'posts'}
                </span>
              </div>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setCurrentWeek(new Date())}
                className="mt-2 text-xs text-purple-600 hover:text-purple-700 hover:bg-purple-50"
              >
                üìç Semana Atual
              </Button>
            </div>
            
            <Button
              variant="outline"
              size="icon"
              onClick={() => setCurrentWeek(addWeeks(currentWeek, 1))}
              className="rounded-full border-2 border-purple-300 hover:bg-purple-50"
            >
              <ChevronRight className="w-5 h-5 text-purple-600" />
            </Button>
          </div>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-6 gap-4">
          {columns.map(column => {
            const columnPosts = getPostsByStatus(column.id);
            
            return (
              <div key={column.id} className={`rounded-2xl p-4 ${column.color} border-2 border-opacity-50 min-h-[600px]`}>
                <div className="mb-4 pb-3 border-b-2 border-gray-300">
                  <h3 className="font-bold text-gray-900 text-sm mb-1">{column.title}</h3>
                  <p className="text-xs text-gray-600">{columnPosts.length} posts</p>
                </div>

                <div className="space-y-3">
                  {columnPosts.map(post => (
                    <Card 
                      key={post.id}
                      className="border-2 border-blue-200 shadow-sm hover:shadow-md transition-all cursor-move bg-white"
                    >
                      <CardContent className="p-3">
                        <div className="flex items-start justify-between mb-2">
                          <div className="flex items-center gap-2">
                            <span className="text-lg">{formatLabels[post.format]?.emoji}</span>
                            <div>
                              <h4 className="font-bold text-sm text-gray-900 line-clamp-1">
                                {post.title}
                              </h4>
                              <p className="text-xs text-gray-500">
                                {getClientName(post.client_id)}
                              </p>
                            </div>
                          </div>
                        </div>

                        {post.scheduled_date && (() => {
                          try {
                            const date = new Date(post.scheduled_date);
                            if (isNaN(date.getTime())) return null;
                            return (
                              <div className="flex items-center gap-1 text-xs text-gray-500 mb-2">
                                <Clock className="w-3 h-3" />
                                {date.toLocaleDateString('pt-BR')}
                              </div>
                            );
                          } catch {
                            return null;
                          }
                        })()}

                        <div className="flex gap-1 mt-2">
                          {column.id !== "pendente" && (
                            <Button
                              size="sm"
                              variant="outline"
                              className="text-xs h-6 px-2"
                              onClick={() => {
                                const currentIndex = columns.findIndex(c => c.id === column.id);
                                if (currentIndex > 0) {
                                  handleStatusChange(post.id, columns[currentIndex - 1].id);
                                }
                              }}
                            >
                              ‚Üê
                            </Button>
                          )}
                          {column.id !== "postado" && (
                            <Button
                              size="sm"
                              variant="outline"
                              className="text-xs h-6 px-2"
                              onClick={() => {
                                const currentIndex = columns.findIndex(c => c.id === column.id);
                                if (currentIndex < columns.length - 1) {
                                  handleStatusChange(post.id, columns[currentIndex + 1].id);
                                }
                              }}
                            >
                              ‚Üí
                            </Button>
                          )}
                        </div>
                      </CardContent>
                    </Card>
                  ))}

                  {columnPosts.length === 0 && (
                    <p className="text-center text-gray-400 text-xs py-8">Nenhum post</p>
                  )}
                </div>
              </div>
            );
          })}
        </div>
      </div>
    </div>
  );
}