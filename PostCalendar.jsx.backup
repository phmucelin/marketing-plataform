import React, { useState, useEffect } from "react";
import { Post, Client } from "@/entities/all";
import { Button } from "@/components/ui/button";
import { Plus, ChevronLeft, ChevronRight, Clock } from "lucide-react";
import { format, startOfWeek, addDays, addWeeks, subWeeks, isSameDay } from "date-fns";
import { ptBR } from "date-fns/locale";
import { safeDate } from "@/utils";

import PostCard from "../components/posts/PostCard";
import PostDialog from "../Components/posts/PostDialog";

export default function PostCalendar() {
  const [posts, setPosts] = useState([]);
  const [clients, setClients] = useState([]);
  const [currentWeek, setCurrentWeek] = useState(new Date());
  const [showDialog, setShowDialog] = useState(false);
  const [editingPost, setEditingPost] = useState(null);

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    const [postsData, clientsData] = await Promise.all([
      Post.list("-scheduled_date"),
      Client.list()
    ]);
    setPosts(postsData);
    setClients(clientsData);
  };

  const handleSavePost = async (postData) => {
    if (editingPost) {
      await Post.update(editingPost.id, postData);
    } else {
      await Post.create(postData);
    }
    setShowDialog(false);
    setEditingPost(null);
    loadData();
  };

  const handleDeletePost = async (postId) => {
    if (confirm("Tem certeza que deseja excluir este post? 🗑️")) {
      await Post.delete(postId);
      loadData();
    }
  };

  const weekStart = startOfWeek(currentWeek, { weekStartsOn: 1, locale: ptBR });
  const weekDays = Array.from({ length: 7 }, (_, i) => addDays(weekStart, i));

  const getPostsForDay = (day) => {
    return posts.filter(post => {
      const postDate = safeDate(post.scheduled_date);
      if (!postDate) return false;
      return format(postDate, "yyyy-MM-dd") === format(day, "yyyy-MM-dd");
    });
  };

  return (
    <div className="p-4 md:p-8 bg-gradient-to-br from-blue-50 via-blue-100 to-indigo-100 min-h-screen">
      <div className="max-w-7xl mx-auto">
        <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-8 gap-4">
          <div>
            <h1 className="text-3xl font-bold bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent mb-2">
              📅 Calendário de Posts
            </h1>
            <p className="text-gray-600">Gerencie seus posts semanalmente ✨</p>
          </div>
          <Button 
            onClick={() => {
              setEditingPost(null);
              setShowDialog(true);
            }}
            className="bg-gradient-to-r from-blue-500 to-indigo-600 hover:from-blue-600 hover:to-indigo-700 shadow-lg"
          >
            <Plus className="w-4 h-4 mr-2" />
            ✨ Novo Post
          </Button>
        </div>

        <div className="bg-white rounded-3xl shadow-xl p-6 mb-6 border-2 border-blue-200">
          <div className="flex items-center justify-between mb-6">
            <Button
              variant="outline"
              size="icon"
              onClick={() => setCurrentWeek(subWeeks(currentWeek, 1))}
              className="rounded-full border-2 border-blue-300 hover:bg-blue-50"
            >
              <ChevronLeft className="w-5 h-5 text-blue-600" />
            </Button>
            <h2 className="text-2xl font-bold bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent capitalize">
              {format(weekStart, "MMMM yyyy", { locale: ptBR })}
            </h2>
            <Button
              variant="outline"
              size="icon"
              onClick={() => setCurrentWeek(addWeeks(currentWeek, 1))}
              className="rounded-full border-2 border-blue-300 hover:bg-blue-50"
            >
              <ChevronRight className="w-5 h-5 text-blue-600" />
            </Button>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-7 gap-3">
            {weekDays.map((day, index) => {
              const dayPosts = getPostsForDay(day);
              const isToday = isSameDay(day, new Date());
              
              return (
                <div
                  key={index}
                  className={`min-h-[250px] rounded-2xl p-4 transition-all border-2 ${
                    isToday 
                      ? "border-blue-500 bg-gradient-to-br from-blue-50 to-indigo-50 shadow-lg" 
                      : "border-blue-200 bg-white hover:border-blue-400 hover:shadow-md"
                  }`}
                >
                  <div className="text-center mb-4 pb-3 border-b-2 border-blue-100">
                    <p className="text-xs font-bold text-blue-600 uppercase tracking-wider mb-1">
                      {format(day, "EEE", { locale: ptBR })}
                    </p>
                    <p className={`text-2xl font-bold ${isToday ? "text-blue-600" : "text-gray-900"}`}>
                      {format(day, "dd")}
                    </p>
                  </div>
                  <div className="space-y-2 max-h-[600px] overflow-y-auto">
                    {dayPosts.map(post => (
                      <PostCard
                        key={post.id}
                        post={post}
                        client={clients.find(c => c.id === post.client_id)}
                        onEdit={(p) => {
                          setEditingPost(p);
                          setShowDialog(true);
                        }}
                        onDelete={handleDeletePost}
                      />
                    ))}
                    {dayPosts.length === 0 && (
                      <p className="text-center text-gray-400 text-sm py-4">Sem posts 📭</p>
                    )}
                  </div>
                </div>
              );
            })}
          </div>
        </div>
      </div>

      <PostDialog
        open={showDialog}
        onClose={() => {
          setShowDialog(false);
          setEditingPost(null);
        }}
        onSave={handleSavePost}
        post={editingPost}
        clients={clients}
      />
    </div>
  );
}